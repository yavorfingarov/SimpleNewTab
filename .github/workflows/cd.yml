name: CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  DOTNET_VERSION: 8.0.x
  LOC_FILE_EXTENSIONS: cs|html|js|css
  SRC_PATH: ./src/SimpleNewTab.Api
  CSPROJ_PATH: ./src/SimpleNewTab.Api/SimpleNewTab.Api.csproj
  MIN_COVERAGE: 75
  GIST_ID: 08cdfad3804ed47e85cddf37d00755a0
  AZURE_WEBAPP_NAME: SimpleNewTab

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get metadata
        run: |
          echo "TIMESTAMP=$(date +'%y.%m.%d.%H%M')" >> $GITHUB_ENV
          echo "LOC=$(( find ./src -regextype posix-egrep -regex ".*\.(${{ env.LOC_FILE_EXTENSIONS }})$" -print0 | xargs -0 cat ) | wc -l)" >> $GITHUB_ENV

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release /p:Version=${{ env.TIMESTAMP }}

      - name: Run unit tests
        run: >
          dotnet test --no-build --configuration Release --filter UnitTests --logger html
          --collect:"XPlat Code Coverage" --results-directory ./coverage

      - name: Upload test results
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: TestResults-${{ env.TIMESTAMP }}
          path: |
            ./tests/**/TestResults/
            ./tests/**/*.received.*

      - name: Generate test coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.3.8
        with:
          reports: ./coverage/**/coverage.cobertura.xml
          targetdir: ./TestCoverageReport
          reporttypes: Html;CsvSummary

      - name: Run mutation tests
        run: |
          dotnet tool install dotnet-stryker --tool-path ./tools
          ./tools/dotnet-stryker --reporter "html" --reporter "markdown" --reporter "dots"

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: CoverageReport-${{ env.TIMESTAMP }}
          path: |
            ./TestCoverageReport/
            ./StrykerOutput/

      - name: Analyze coverage report
        id: analyze-coverage-report
        run: |
          set_output() {
            if [[ -z $3 ]]; then
              echo "::error::Got an empty value for $1."
              exit 1
            fi
            echo "$1=$3$4" >> $GITHUB_OUTPUT
            echo "* $2: **$3$4**" >> $GITHUB_STEP_SUMMARY
          }
          set_lines_of_code() {
            if [[ ${#1} -lt 4 ]]; then
              set_output "lines_of_code" "Lines of code" "$1"
            elif [[ ${#1} -eq 4 ]]; then
              set_output "lines_of_code" "Lines of code" "${1::1}.${1:1:1}" "k"
            elif [[ ${#1} -eq 5 ]]; then
              set_output "lines_of_code" "Lines of code" "${1:0:2}" "k"
            elif [[ ${#1} -eq 6 ]]; then
              set_output "lines_of_code" "Lines of code" "${1:0:3}" "k"
            else
              echo "::error::Got an unsupported value $1 for lines_of_code."
              exit 1
            fi
          }
          check_coverage() {
            if [[ $1 -lt ${{ env.MIN_COVERAGE }} || $2 -lt ${{ env.MIN_COVERAGE }} ]]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**ERROR: The code coverage is insufficient.**" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          }
          lines_of_code=$(cat ./TestCoverageReport/Summary.csv | grep -Po '(?<=Total lines:;)[0-9]+')
          set_lines_of_code "${{ env.LOC }}"
          test_coverage=$(cat ./TestCoverageReport/Summary.csv | grep -Po '(?<=Line coverage:;)[0-9]+')
          set_output "test_coverage" "Test coverage" "$test_coverage" "%"
          mutation_report_path=$(find ./StrykerOutput -name mutation-report.md)
          mutation_score=$(cat $mutation_report_path | grep -Po '(?<=## The final mutation score is )[0-9]+')
          set_output "mutation_score" "Mutation score" "$mutation_score" "%"
          check_coverage "$test_coverage" "$mutation_score"

      - name: Update lines of code
        if: ${{ github.event_name == 'push' }}
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_TOKEN }}
          gistID: ${{ env.GIST_ID }}
          filename: lines-of-code.json
          label: loc
          message: ${{ steps.analyze-coverage-report.outputs.lines_of_code }}
          color: blue

      - name: Update test coverage
        if: ${{ github.event_name == 'push' }}
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_TOKEN }}
          gistID: ${{ env.GIST_ID }}
          filename: test-coverage.json
          label: test coverage
          message: ${{ steps.analyze-coverage-report.outputs.test_coverage }}
          color: brightgreen

      - name: Update mutation score
        if: ${{ github.event_name == 'push' }}
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_TOKEN }}
          gistID: ${{ env.GIST_ID }}
          filename: mutation-score.json
          label: mutation score
          message: ${{ steps.analyze-coverage-report.outputs.mutation_score }}
          color: brightgreen

      - name: Check deploy conditions
        if: ${{ github.event_name == 'push' }}
        id: changed-src
        uses: marceloprado/has-changed-path@v1.0.1
        with:
          paths: ${{ env.SRC_PATH }}

      - name: Create package
        if: ${{ github.event_name == 'push' && steps.changed-src.outputs.changed == 'true' }}
        run: dotnet publish --no-build --configuration Release --output ./app ${{ env.CSPROJ_PATH }}

      - name: Deploy to Azure App Service
        if: ${{ github.event_name == 'push' && steps.changed-src.outputs.changed == 'true' }}
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ./app
